/**
 * GitHubActionsGenerator - GitHub Actions Workflow 生成器
 * 
 * 功能：
 * - 自动生成测试 workflow
 * - 配置 TestMind 集成
 * - 支持多种触发条件
 * - 自动评论 PR
 */

import { createComponentLogger } from '../utils/logger';
import * as fs from 'fs-extra';
import * as path from 'path';

export interface WorkflowOptions {
  name?: string;
  triggers?: Array<'push' | 'pull_request' | 'schedule' | 'workflow_dispatch'>;
  branches?: string[];
  coverageThreshold?: number;
  testCommand?: string;
  nodeVersion?: string;
  enablePRComments?: boolean;
}

export class GitHubActionsGenerator {
  private logger = createComponentLogger('GitHubActionsGenerator');

  /**
   * 生成 GitHub Actions workflow
   */
  async generateWorkflow(options: WorkflowOptions = {}): Promise<string> {
    const {
      name = 'TestMind AI Tests',
      triggers = ['push', 'pull_request'],
      branches = ['main', 'develop'],
      coverageThreshold = 80,
      testCommand = 'npm test',
      nodeVersion = '20',
      enablePRComments = true,
    } = options;

    this.logger.info('Generating GitHub Actions workflow', { name, triggers });

    const workflow = `name: ${name}

on:
${triggers.map(trigger => {
  if (trigger === 'push' || trigger === 'pull_request') {
    return `  ${trigger}:
    branches: [${branches.map(b => `'${b}'`).join(', ')}]`;
  }
  if (trigger === 'schedule') {
    return `  schedule:
    - cron: '0 0 * * *' # Daily at midnight`;
  }
  return `  ${trigger}:`;
}).join('\n')}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${nodeVersion}'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate missing tests with TestMind
        env:
          OPENAI_API_KEY: \${{ secrets.OPENAI_API_KEY }}
        run: |
          npx testmind generate --auto --coverage-threshold ${coverageThreshold}

      - name: Run tests
        run: ${testCommand} --coverage

      - name: Check coverage threshold
        run: |
          coverage=\$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( \$(echo "$coverage < ${coverageThreshold}" | bc -l) )); then
            echo "Coverage $coverage% is below threshold ${coverageThreshold}%"
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

${enablePRComments ? `      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: \${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const coveragePct = coverage.total.lines.pct;
            
            const comment = \`## 🧪 Test Results
            
            - ✅ All tests passed
            - 📊 Coverage: **\${coveragePct}%**
            - 🎯 Threshold: ${coverageThreshold}%
            
            \${coveragePct >= ${coverageThreshold} ? '✨ Coverage meets threshold!' : '⚠️ Coverage below threshold'}
            
            ---
            *Generated by TestMind AI*\`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: comment
            });` : ''}

  auto-fix:
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${nodeVersion}'

      - name: Auto-fix failing tests
        env:
          OPENAI_API_KEY: \${{ secrets.OPENAI_API_KEY }}
        run: |
          npx testmind fix --auto

      - name: Create PR with fixes
        uses: peter-evans/create-pull-request@v5
        with:
          token: \${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: auto-fix failing tests'
          title: '🤖 Auto-fix failing tests'
          body: |
            ## Auto-generated test fixes
            
            This PR contains automatically generated fixes for failing tests.
            
            Please review the changes carefully before merging.
            
            ---
            *Generated by TestMind AI*
          branch: testmind/auto-fix
`;

    return workflow;
  }

  /**
   * 保存 workflow 文件
   */
  async saveWorkflow(workflow: string, filename = 'testmind.yml'): Promise<string> {
    const workflowDir = path.join(process.cwd(), '.github', 'workflows');
    await fs.ensureDir(workflowDir);

    const filePath = path.join(workflowDir, filename);
    await fs.writeFile(filePath, workflow, 'utf-8');

    this.logger.info('Workflow saved', { path: filePath });
    return filePath;
  }

  /**
   * 生成多种预设 workflow
   */
  async generatePresets(): Promise<Record<string, string>> {
    const presets: Record<string, string> = {};

    // 1. 基础 CI workflow
    presets.basic = await this.generateWorkflow({
      name: 'CI',
      triggers: ['push', 'pull_request'],
      enablePRComments: false,
    });

    // 2. 完整 workflow（带 PR 评论）
    presets.full = await this.generateWorkflow({
      name: 'TestMind Full CI',
      triggers: ['push', 'pull_request', 'workflow_dispatch'],
      enablePRComments: true,
    });

    // 3. 定时 workflow（每日）
    presets.scheduled = await this.generateWorkflow({
      name: 'Nightly Tests',
      triggers: ['schedule'],
      coverageThreshold: 90,
    });

    // 4. 快速 workflow（只在 PR 上运行）
    presets.pr = await this.generateWorkflow({
      name: 'PR Tests',
      triggers: ['pull_request'],
      testCommand: 'npm test -- --changed',
      enablePRComments: true,
    });

    return presets;
  }
}

